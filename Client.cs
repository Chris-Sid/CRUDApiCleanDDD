//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace OpenAPI_JSON_Schema
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Client(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://dev.your-api-server.com";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get Address
        /// </summary>
        /// <remarks>
        /// This operation is used to get an Address from DMS. {addressId} will be known to DMS.
        /// </remarks>
        /// <param name="addressId">Identifier Value</param>
        /// <param name="x_Authorization">Authorization Token</param>
        /// <param name="x_RequestId">Request Id</param>
        /// <param name="accept_Language">Accept Language. If not set default value is 'en'</param>
        /// <param name="x_EntityOwnerUserId">Entity Owner User Id</param>
        /// <param name="x_EntityOwnerCompanyId">Entity Owner Company Id</param>
        /// <param name="x_DimensionCompany">Dimension Company</param>
        /// <param name="x_DimensionLocation">Dimension Location</param>
        /// <param name="x_DimensionBranch">Dimension Branch</param>
        /// <param name="x_DimensionMake">Dimension Make</param>
        /// <param name="x_DimensionMarketSegment">Dimension Market Segment</param>
        /// <param name="x_TimezoneOffset">Timezone offset to handle datetimes</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AddressDto> GetAddressAsync(string addressId, string x_Authorization, string x_RequestId, string accept_Language, string x_EntityOwnerUserId, string x_EntityOwnerCompanyId, string x_DimensionCompany, string x_DimensionLocation, string x_DimensionBranch, string x_DimensionMake, string x_DimensionMarketSegment, string x_TimezoneOffset)
        {
            return GetAddressAsync(addressId, x_Authorization, x_RequestId, accept_Language, x_EntityOwnerUserId, x_EntityOwnerCompanyId, x_DimensionCompany, x_DimensionLocation, x_DimensionBranch, x_DimensionMake, x_DimensionMarketSegment, x_TimezoneOffset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Address
        /// </summary>
        /// <remarks>
        /// This operation is used to get an Address from DMS. {addressId} will be known to DMS.
        /// </remarks>
        /// <param name="addressId">Identifier Value</param>
        /// <param name="x_Authorization">Authorization Token</param>
        /// <param name="x_RequestId">Request Id</param>
        /// <param name="accept_Language">Accept Language. If not set default value is 'en'</param>
        /// <param name="x_EntityOwnerUserId">Entity Owner User Id</param>
        /// <param name="x_EntityOwnerCompanyId">Entity Owner Company Id</param>
        /// <param name="x_DimensionCompany">Dimension Company</param>
        /// <param name="x_DimensionLocation">Dimension Location</param>
        /// <param name="x_DimensionBranch">Dimension Branch</param>
        /// <param name="x_DimensionMake">Dimension Make</param>
        /// <param name="x_DimensionMarketSegment">Dimension Market Segment</param>
        /// <param name="x_TimezoneOffset">Timezone offset to handle datetimes</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AddressDto> GetAddressAsync(string addressId, string x_Authorization, string x_RequestId, string accept_Language, string x_EntityOwnerUserId, string x_EntityOwnerCompanyId, string x_DimensionCompany, string x_DimensionLocation, string x_DimensionBranch, string x_DimensionMake, string x_DimensionMarketSegment, string x_TimezoneOffset, System.Threading.CancellationToken cancellationToken)
        {
            if (addressId == null)
                throw new System.ArgumentNullException("addressId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Authorization == null)
                        throw new System.ArgumentNullException("x_Authorization");
                    request_.Headers.TryAddWithoutValidation("X-Authorization", ConvertToString(x_Authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_RequestId == null)
                        throw new System.ArgumentNullException("x_RequestId");
                    request_.Headers.TryAddWithoutValidation("X-RequestId", ConvertToString(x_RequestId, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_EntityOwnerUserId != null)
                        request_.Headers.TryAddWithoutValidation("X-EntityOwnerUserId", ConvertToString(x_EntityOwnerUserId, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_EntityOwnerCompanyId != null)
                        request_.Headers.TryAddWithoutValidation("X-EntityOwnerCompanyId", ConvertToString(x_EntityOwnerCompanyId, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionCompany != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionCompany", ConvertToString(x_DimensionCompany, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionLocation != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionLocation", ConvertToString(x_DimensionLocation, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionBranch != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionBranch", ConvertToString(x_DimensionBranch, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionMake != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionMake", ConvertToString(x_DimensionMake, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionMarketSegment != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionMarketSegment", ConvertToString(x_DimensionMarketSegment, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_TimezoneOffset != null)
                        request_.Headers.TryAddWithoutValidation("X-TimezoneOffset", ConvertToString(x_TimezoneOffset, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/dms/addresses/{addressId}"
                    urlBuilder_.Append("api/dms/addresses/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(addressId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AddressDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all target values for selected mapping field type
        /// </summary>
        /// <param name="mappingType">StaticMappingType type</param>
        /// <param name="x_Authorization">Authorization Token</param>
        /// <param name="x_RequestId">Request Id</param>
        /// <param name="accept_Language">Accept Language. If not set default value is 'en'</param>
        /// <param name="x_EntityOwnerUserId">Entity Owner User Id</param>
        /// <param name="x_EntityOwnerCompanyId">Entity Owner Company Id</param>
        /// <param name="x_DimensionCompany">Dimension Company</param>
        /// <param name="x_DimensionLocation">Dimension Location</param>
        /// <param name="x_DimensionBranch">Dimension Branch</param>
        /// <param name="x_DimensionMake">Dimension Make</param>
        /// <param name="x_DimensionMarketSegment">Dimension Market Segment</param>
        /// <param name="x_TimezoneOffset">Timezone offset to handle datetimes</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MappingDto>> GetMappingAsync(MappingTypesEnum mappingType, string x_Authorization, string x_RequestId, string accept_Language, string x_EntityOwnerUserId, string x_EntityOwnerCompanyId, string x_DimensionCompany, string x_DimensionLocation, string x_DimensionBranch, string x_DimensionMake, string x_DimensionMarketSegment, string x_TimezoneOffset)
        {
            return GetMappingAsync(mappingType, x_Authorization, x_RequestId, accept_Language, x_EntityOwnerUserId, x_EntityOwnerCompanyId, x_DimensionCompany, x_DimensionLocation, x_DimensionBranch, x_DimensionMake, x_DimensionMarketSegment, x_TimezoneOffset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all target values for selected mapping field type
        /// </summary>
        /// <param name="mappingType">StaticMappingType type</param>
        /// <param name="x_Authorization">Authorization Token</param>
        /// <param name="x_RequestId">Request Id</param>
        /// <param name="accept_Language">Accept Language. If not set default value is 'en'</param>
        /// <param name="x_EntityOwnerUserId">Entity Owner User Id</param>
        /// <param name="x_EntityOwnerCompanyId">Entity Owner Company Id</param>
        /// <param name="x_DimensionCompany">Dimension Company</param>
        /// <param name="x_DimensionLocation">Dimension Location</param>
        /// <param name="x_DimensionBranch">Dimension Branch</param>
        /// <param name="x_DimensionMake">Dimension Make</param>
        /// <param name="x_DimensionMarketSegment">Dimension Market Segment</param>
        /// <param name="x_TimezoneOffset">Timezone offset to handle datetimes</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MappingDto>> GetMappingAsync(MappingTypesEnum mappingType, string x_Authorization, string x_RequestId, string accept_Language, string x_EntityOwnerUserId, string x_EntityOwnerCompanyId, string x_DimensionCompany, string x_DimensionLocation, string x_DimensionBranch, string x_DimensionMake, string x_DimensionMarketSegment, string x_TimezoneOffset, System.Threading.CancellationToken cancellationToken)
        {
            if (mappingType == null)
                throw new System.ArgumentNullException("mappingType");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Authorization == null)
                        throw new System.ArgumentNullException("x_Authorization");
                    request_.Headers.TryAddWithoutValidation("X-Authorization", ConvertToString(x_Authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_RequestId == null)
                        throw new System.ArgumentNullException("x_RequestId");
                    request_.Headers.TryAddWithoutValidation("X-RequestId", ConvertToString(x_RequestId, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_EntityOwnerUserId != null)
                        request_.Headers.TryAddWithoutValidation("X-EntityOwnerUserId", ConvertToString(x_EntityOwnerUserId, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_EntityOwnerCompanyId != null)
                        request_.Headers.TryAddWithoutValidation("X-EntityOwnerCompanyId", ConvertToString(x_EntityOwnerCompanyId, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionCompany != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionCompany", ConvertToString(x_DimensionCompany, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionLocation != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionLocation", ConvertToString(x_DimensionLocation, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionBranch != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionBranch", ConvertToString(x_DimensionBranch, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionMake != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionMake", ConvertToString(x_DimensionMake, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionMarketSegment != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionMarketSegment", ConvertToString(x_DimensionMarketSegment, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_TimezoneOffset != null)
                        request_.Headers.TryAddWithoutValidation("X-TimezoneOffset", ConvertToString(x_TimezoneOffset, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/dms/mappings/{mappingType}/values"
                    urlBuilder_.Append("api/dms/mappings/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(mappingType, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/values");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MappingDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Person
        /// </summary>
        /// <param name="personId">Identifier Value</param>
        /// <param name="x_Authorization">Authorization Token</param>
        /// <param name="x_RequestId">Request Id</param>
        /// <param name="accept_Language">Accept Language. If not set default value is 'en'</param>
        /// <param name="x_EntityOwnerUserId">Entity Owner User Id</param>
        /// <param name="x_EntityOwnerCompanyId">Entity Owner Company Id</param>
        /// <param name="x_DimensionCompany">Dimension Company</param>
        /// <param name="x_DimensionLocation">Dimension Location</param>
        /// <param name="x_DimensionBranch">Dimension Branch</param>
        /// <param name="x_DimensionMake">Dimension Make</param>
        /// <param name="x_DimensionMarketSegment">Dimension Market Segment</param>
        /// <param name="x_TimezoneOffset">Timezone offset to handle datetimes</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PersonDto> GetPersonAsync(string personId, string x_Authorization, string x_RequestId, string accept_Language, string x_EntityOwnerUserId, string x_EntityOwnerCompanyId, string x_DimensionCompany, string x_DimensionLocation, string x_DimensionBranch, string x_DimensionMake, string x_DimensionMarketSegment, string x_TimezoneOffset)
        {
            return GetPersonAsync(personId, x_Authorization, x_RequestId, accept_Language, x_EntityOwnerUserId, x_EntityOwnerCompanyId, x_DimensionCompany, x_DimensionLocation, x_DimensionBranch, x_DimensionMake, x_DimensionMarketSegment, x_TimezoneOffset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Person
        /// </summary>
        /// <param name="personId">Identifier Value</param>
        /// <param name="x_Authorization">Authorization Token</param>
        /// <param name="x_RequestId">Request Id</param>
        /// <param name="accept_Language">Accept Language. If not set default value is 'en'</param>
        /// <param name="x_EntityOwnerUserId">Entity Owner User Id</param>
        /// <param name="x_EntityOwnerCompanyId">Entity Owner Company Id</param>
        /// <param name="x_DimensionCompany">Dimension Company</param>
        /// <param name="x_DimensionLocation">Dimension Location</param>
        /// <param name="x_DimensionBranch">Dimension Branch</param>
        /// <param name="x_DimensionMake">Dimension Make</param>
        /// <param name="x_DimensionMarketSegment">Dimension Market Segment</param>
        /// <param name="x_TimezoneOffset">Timezone offset to handle datetimes</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PersonDto> GetPersonAsync(string personId, string x_Authorization, string x_RequestId, string accept_Language, string x_EntityOwnerUserId, string x_EntityOwnerCompanyId, string x_DimensionCompany, string x_DimensionLocation, string x_DimensionBranch, string x_DimensionMake, string x_DimensionMarketSegment, string x_TimezoneOffset, System.Threading.CancellationToken cancellationToken)
        {
            if (personId == null)
                throw new System.ArgumentNullException("personId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Authorization == null)
                        throw new System.ArgumentNullException("x_Authorization");
                    request_.Headers.TryAddWithoutValidation("X-Authorization", ConvertToString(x_Authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_RequestId == null)
                        throw new System.ArgumentNullException("x_RequestId");
                    request_.Headers.TryAddWithoutValidation("X-RequestId", ConvertToString(x_RequestId, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_EntityOwnerUserId != null)
                        request_.Headers.TryAddWithoutValidation("X-EntityOwnerUserId", ConvertToString(x_EntityOwnerUserId, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_EntityOwnerCompanyId != null)
                        request_.Headers.TryAddWithoutValidation("X-EntityOwnerCompanyId", ConvertToString(x_EntityOwnerCompanyId, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionCompany != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionCompany", ConvertToString(x_DimensionCompany, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionLocation != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionLocation", ConvertToString(x_DimensionLocation, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionBranch != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionBranch", ConvertToString(x_DimensionBranch, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionMake != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionMake", ConvertToString(x_DimensionMake, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionMarketSegment != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionMarketSegment", ConvertToString(x_DimensionMarketSegment, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_TimezoneOffset != null)
                        request_.Headers.TryAddWithoutValidation("X-TimezoneOffset", ConvertToString(x_TimezoneOffset, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/dms/persons/{personId}"
                    urlBuilder_.Append("api/dms/persons/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(personId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PersonDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Login to Dms
        /// </summary>
        /// <param name="accept_Language">Accept Language. If not set default value is 'en'</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DmsTokenResponse> GetSessionAsync(string accept_Language, TokenRequest body)
        {
            return GetSessionAsync(accept_Language, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Login to Dms
        /// </summary>
        /// <param name="accept_Language">Accept Language. If not set default value is 'en'</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DmsTokenResponse> GetSessionAsync(string accept_Language, TokenRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/dms/token"
                    urlBuilder_.Append("api/dms/token");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DmsTokenResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or Update Address
        /// </summary>
        /// <param name="x_Authorization">Authorization Token</param>
        /// <param name="x_RequestId">Request Id</param>
        /// <param name="accept_Language">Accept Language. If not set default value is 'en'</param>
        /// <param name="x_EntityOwnerUserId">Entity Owner User Id</param>
        /// <param name="x_EntityOwnerCompanyId">Entity Owner Company Id</param>
        /// <param name="x_DimensionCompany">Dimension Company</param>
        /// <param name="x_DimensionLocation">Dimension Location</param>
        /// <param name="x_DimensionBranch">Dimension Branch</param>
        /// <param name="x_DimensionMake">Dimension Make</param>
        /// <param name="x_DimensionMarketSegment">Dimension Market Segment</param>
        /// <param name="x_TimezoneOffset">Timezone offset to handle datetimes</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AddressDto> PostAddressAsync(string x_Authorization, string x_RequestId, string accept_Language, string x_EntityOwnerUserId, string x_EntityOwnerCompanyId, string x_DimensionCompany, string x_DimensionLocation, string x_DimensionBranch, string x_DimensionMake, string x_DimensionMarketSegment, string x_TimezoneOffset, AddressDto body)
        {
            return PostAddressAsync(x_Authorization, x_RequestId, accept_Language, x_EntityOwnerUserId, x_EntityOwnerCompanyId, x_DimensionCompany, x_DimensionLocation, x_DimensionBranch, x_DimensionMake, x_DimensionMarketSegment, x_TimezoneOffset, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or Update Address
        /// </summary>
        /// <param name="x_Authorization">Authorization Token</param>
        /// <param name="x_RequestId">Request Id</param>
        /// <param name="accept_Language">Accept Language. If not set default value is 'en'</param>
        /// <param name="x_EntityOwnerUserId">Entity Owner User Id</param>
        /// <param name="x_EntityOwnerCompanyId">Entity Owner Company Id</param>
        /// <param name="x_DimensionCompany">Dimension Company</param>
        /// <param name="x_DimensionLocation">Dimension Location</param>
        /// <param name="x_DimensionBranch">Dimension Branch</param>
        /// <param name="x_DimensionMake">Dimension Make</param>
        /// <param name="x_DimensionMarketSegment">Dimension Market Segment</param>
        /// <param name="x_TimezoneOffset">Timezone offset to handle datetimes</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AddressDto> PostAddressAsync(string x_Authorization, string x_RequestId, string accept_Language, string x_EntityOwnerUserId, string x_EntityOwnerCompanyId, string x_DimensionCompany, string x_DimensionLocation, string x_DimensionBranch, string x_DimensionMake, string x_DimensionMarketSegment, string x_TimezoneOffset, AddressDto body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Authorization == null)
                        throw new System.ArgumentNullException("x_Authorization");
                    request_.Headers.TryAddWithoutValidation("X-Authorization", ConvertToString(x_Authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_RequestId == null)
                        throw new System.ArgumentNullException("x_RequestId");
                    request_.Headers.TryAddWithoutValidation("X-RequestId", ConvertToString(x_RequestId, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_EntityOwnerUserId != null)
                        request_.Headers.TryAddWithoutValidation("X-EntityOwnerUserId", ConvertToString(x_EntityOwnerUserId, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_EntityOwnerCompanyId != null)
                        request_.Headers.TryAddWithoutValidation("X-EntityOwnerCompanyId", ConvertToString(x_EntityOwnerCompanyId, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionCompany != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionCompany", ConvertToString(x_DimensionCompany, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionLocation != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionLocation", ConvertToString(x_DimensionLocation, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionBranch != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionBranch", ConvertToString(x_DimensionBranch, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionMake != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionMake", ConvertToString(x_DimensionMake, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionMarketSegment != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionMarketSegment", ConvertToString(x_DimensionMarketSegment, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_TimezoneOffset != null)
                        request_.Headers.TryAddWithoutValidation("X-TimezoneOffset", ConvertToString(x_TimezoneOffset, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/dms/addresses"
                    urlBuilder_.Append("api/dms/addresses");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AddressDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or Update Person
        /// </summary>
        /// <param name="x_Authorization">Authorization Token</param>
        /// <param name="x_RequestId">Request Id</param>
        /// <param name="accept_Language">Accept Language. If not set default value is 'en'</param>
        /// <param name="x_EntityOwnerUserId">Entity Owner User Id</param>
        /// <param name="x_EntityOwnerCompanyId">Entity Owner Company Id</param>
        /// <param name="x_DimensionCompany">Dimension Company</param>
        /// <param name="x_DimensionLocation">Dimension Location</param>
        /// <param name="x_DimensionBranch">Dimension Branch</param>
        /// <param name="x_DimensionMake">Dimension Make</param>
        /// <param name="x_DimensionMarketSegment">Dimension Market Segment</param>
        /// <param name="x_TimezoneOffset">Timezone offset to handle datetimes</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PersonDto> SendPersonAsync(string x_Authorization, string x_RequestId, string accept_Language, string x_EntityOwnerUserId, string x_EntityOwnerCompanyId, string x_DimensionCompany, string x_DimensionLocation, string x_DimensionBranch, string x_DimensionMake, string x_DimensionMarketSegment, string x_TimezoneOffset, PersonDto body)
        {
            return SendPersonAsync(x_Authorization, x_RequestId, accept_Language, x_EntityOwnerUserId, x_EntityOwnerCompanyId, x_DimensionCompany, x_DimensionLocation, x_DimensionBranch, x_DimensionMake, x_DimensionMarketSegment, x_TimezoneOffset, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or Update Person
        /// </summary>
        /// <param name="x_Authorization">Authorization Token</param>
        /// <param name="x_RequestId">Request Id</param>
        /// <param name="accept_Language">Accept Language. If not set default value is 'en'</param>
        /// <param name="x_EntityOwnerUserId">Entity Owner User Id</param>
        /// <param name="x_EntityOwnerCompanyId">Entity Owner Company Id</param>
        /// <param name="x_DimensionCompany">Dimension Company</param>
        /// <param name="x_DimensionLocation">Dimension Location</param>
        /// <param name="x_DimensionBranch">Dimension Branch</param>
        /// <param name="x_DimensionMake">Dimension Make</param>
        /// <param name="x_DimensionMarketSegment">Dimension Market Segment</param>
        /// <param name="x_TimezoneOffset">Timezone offset to handle datetimes</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PersonDto> SendPersonAsync(string x_Authorization, string x_RequestId, string accept_Language, string x_EntityOwnerUserId, string x_EntityOwnerCompanyId, string x_DimensionCompany, string x_DimensionLocation, string x_DimensionBranch, string x_DimensionMake, string x_DimensionMarketSegment, string x_TimezoneOffset, PersonDto body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_Authorization == null)
                        throw new System.ArgumentNullException("x_Authorization");
                    request_.Headers.TryAddWithoutValidation("X-Authorization", ConvertToString(x_Authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_RequestId == null)
                        throw new System.ArgumentNullException("x_RequestId");
                    request_.Headers.TryAddWithoutValidation("X-RequestId", ConvertToString(x_RequestId, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept_Language != null)
                        request_.Headers.TryAddWithoutValidation("Accept-Language", ConvertToString(accept_Language, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_EntityOwnerUserId != null)
                        request_.Headers.TryAddWithoutValidation("X-EntityOwnerUserId", ConvertToString(x_EntityOwnerUserId, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_EntityOwnerCompanyId != null)
                        request_.Headers.TryAddWithoutValidation("X-EntityOwnerCompanyId", ConvertToString(x_EntityOwnerCompanyId, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionCompany != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionCompany", ConvertToString(x_DimensionCompany, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionLocation != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionLocation", ConvertToString(x_DimensionLocation, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionBranch != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionBranch", ConvertToString(x_DimensionBranch, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionMake != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionMake", ConvertToString(x_DimensionMake, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_DimensionMarketSegment != null)
                        request_.Headers.TryAddWithoutValidation("X-DimensionMarketSegment", ConvertToString(x_DimensionMarketSegment, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_TimezoneOffset != null)
                        request_.Headers.TryAddWithoutValidation("X-TimezoneOffset", ConvertToString(x_TimezoneOffset, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/dms/persons"
                    urlBuilder_.Append("api/dms/persons");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PersonDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Gets or Sets EmptyEmailReasonType
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EmptyEmailReasonTypeEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unset")]
        Unset = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NotAvailable")]
        NotAvailable = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NotProvided")]
        NotProvided = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerTaxNumber
    {
        [Newtonsoft.Json.JsonProperty("taxNumberId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DmsIdentifier TaxNumberId { get; set; }

        /// <summary>
        /// ### Value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    /// <summary>
    /// Dms Identifier
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DmsIdentifier
    {
        /// <summary>
        /// Internal Id (the DMS ID)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternalId { get; set; }

        /// <summary>
        /// External Id (the DSW/NMT ID)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

    }

    /// <summary>
    /// ### Payment Info DTO
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentInfoDto
    {
        [Newtonsoft.Json.JsonProperty("preferredCurrency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DmsIdentifier PreferredCurrency { get; set; }

        /// <summary>
        /// ### Federal Tax ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("federalTaxId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FederalTaxId { get; set; }

        /// <summary>
        /// ### Unified Federal Tax Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unifiedFederalTaxId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnifiedFederalTaxId { get; set; }

        /// <summary>
        /// ### Company Registration Number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyRegistrationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyRegistrationNumber { get; set; }

        /// <summary>
        /// ### Tax Office
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxOffice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxOffice { get; set; }

        [Newtonsoft.Json.JsonProperty("vatGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DmsIdentifier VatGroup { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentTermsCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DmsIdentifier PaymentTermsCode { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentTypeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DmsIdentifier PaymentTypeCode { get; set; }

        /// <summary>
        /// ###
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerTaxNumberList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerTaxNumber> CustomerTaxNumberList { get; set; }

    }

    /// <summary>
    /// ### Communication Info DTO
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommunicationInfoDto
    {
        /// <summary>
        /// ### Addresses
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AddressDto> Addresses { get; set; }

        /// <summary>
        /// ### Emails
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// ### Mobile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobileNum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MobileNum { get; set; }

        /// <summary>
        /// ### Fax
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fax { get; set; }

        /// <summary>
        /// ### Phone Num
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNum { get; set; }

        /// <summary>
        /// ### Phone Num 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNum1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNum1 { get; set; }

        /// <summary>
        /// ### Phone Num 2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNum2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNum2 { get; set; }

        /// <summary>
        /// ### Home Fax
        /// </summary>
        [Newtonsoft.Json.JsonProperty("homeFax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HomeFax { get; set; }

        /// <summary>
        /// ### Home
        /// </summary>
        [Newtonsoft.Json.JsonProperty("home", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Home { get; set; }

        /// <summary>
        /// ### Home Mobile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("homeMobile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HomeMobile { get; set; }

        /// <summary>
        /// ### Home Email
        /// </summary>
        [Newtonsoft.Json.JsonProperty("homeEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HomeEmail { get; set; }

        /// <summary>
        /// ### Home Website
        /// </summary>
        [Newtonsoft.Json.JsonProperty("homeWebsite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HomeWebsite { get; set; }

        /// <summary>
        /// ### Work
        /// </summary>
        [Newtonsoft.Json.JsonProperty("work", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Work { get; set; }

        /// <summary>
        /// ### Work Fax
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workFax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkFax { get; set; }

        /// <summary>
        /// ### Work Mobile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workMobile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkMobile { get; set; }

        /// <summary>
        /// ### Work Email
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkEmail { get; set; }

        /// <summary>
        /// ### Work Website
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workWebsite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkWebsite { get; set; }

        /// <summary>
        /// ### Work Company Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workCompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkCompanyName { get; set; }

        /// <summary>
        /// ### Work Phone Assistant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workPhoneAssistant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkPhoneAssistant { get; set; }

        /// <summary>
        /// ### Work Phone Reception
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workPhoneReception", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkPhoneReception { get; set; }

        /// <summary>
        /// ### Facebook URL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("facebookUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FacebookUrl { get; set; }

        /// <summary>
        /// ### LinkedIn URL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkedinUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LinkedinUrl { get; set; }

        /// <summary>
        /// ### Twitter URL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("twitterUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TwitterUrl { get; set; }

        /// <summary>
        /// ### Social No.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("socialNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SocialNo { get; set; }

    }

    /// <summary>
    /// Address DTO
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressDto
    {
        [Newtonsoft.Json.JsonProperty("addressId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DmsIdentifier AddressId { get; set; }

        [Newtonsoft.Json.JsonProperty("businessPartnerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DmsIdentifier BusinessPartnerId { get; set; }

        [Newtonsoft.Json.JsonProperty("contactPersonId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DmsIdentifier ContactPersonId { get; set; }

        /// <summary>
        /// Street
        /// </summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }

        /// <summary>
        /// Block
        /// </summary>
        [Newtonsoft.Json.JsonProperty("block", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Block { get; set; }

        /// <summary>
        /// Zip Code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZipCode { get; set; }

        /// <summary>
        /// City
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// County
        /// </summary>
        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string County { get; set; }

        /// <summary>
        /// State
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        /// <summary>
        /// Street No.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetNo { get; set; }

        /// <summary>
        /// Longitude
        /// </summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Longitude { get; set; }

        /// <summary>
        /// Latitude
        /// </summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Latitude { get; set; }

        /// <summary>
        /// Federal Tax ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("federalTaxId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FederalTaxId { get; set; }

        /// <summary>
        /// Tax Code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxCode { get; set; }

        /// <summary>
        /// Building Floor Room
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buildingFloorRoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildingFloorRoom { get; set; }

        [Newtonsoft.Json.JsonProperty("countryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DmsIdentifier CountryId { get; set; }

        [Newtonsoft.Json.JsonProperty("placeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceTypeEnum PlaceType { get; set; }

        [Newtonsoft.Json.JsonProperty("addressType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AddressTypeEnum AddressType { get; set; }

        /// <summary>
        /// Is Default
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefault { get; set; }

        /// <summary>
        /// Street for alternative language
        /// </summary>
        [Newtonsoft.Json.JsonProperty("altLanguageStreet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AltLanguageStreet { get; set; }

        /// <summary>
        /// City for alternative language
        /// </summary>
        [Newtonsoft.Json.JsonProperty("altLanguageCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AltLanguageCity { get; set; }

        /// <summary>
        /// State Description for alternative language
        /// </summary>
        [Newtonsoft.Json.JsonProperty("altLanguageStateDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AltLanguageStateDescription { get; set; }

        /// <summary>
        /// Block for alternative language
        /// </summary>
        [Newtonsoft.Json.JsonProperty("altLanguageBlock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AltLanguageBlock { get; set; }

        /// <summary>
        /// Building Floor Room for alternative language
        /// </summary>
        [Newtonsoft.Json.JsonProperty("altLanguageBuildingFloorRoom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AltLanguageBuildingFloorRoom { get; set; }

    }

    /// <summary>
    /// ### Address Type  * BillTo = 0  * ShipTo = 1
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AddressTypeEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BillTo")]
        BillTo = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ShipTo")]
        ShipTo = 1,

    }

    /// <summary>
    /// ### Place Type  * Home = 0  * Work = 1  * Unknown = 2
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PlaceTypeEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Home")]
        Home = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Work")]
        Work = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 2,

    }

    /// <summary>
    /// ### DMS Session Response
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DmsTokenResponse
    {
        /// <summary>
        /// ### Session Token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessToken { get; set; }

        /// <summary>
        /// ### Expires At
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expiresAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpiresAt { get; set; }

    }

    /// <summary>
    /// ### DMS Session Request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TokenRequest
    {
        /// <summary>
        /// ### Username
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserName { get; set; }

        /// <summary>
        /// ### Password
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

    }

    /// <summary>
    /// ## Person DTO
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PersonDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DmsIdentifier Id { get; set; }

        [Newtonsoft.Json.JsonProperty("businessPartner", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DmsIdentifier BusinessPartner { get; set; } = new DmsIdentifier();

        /// <summary>
        /// ### First Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string FirstName { get; set; }

        /// <summary>
        /// ### Middle Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MiddleName { get; set; }

        /// <summary>
        /// ### Last Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Surname { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DmsIdentifier Title { get; set; }

        [Newtonsoft.Json.JsonProperty("communicationInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommunicationInfoDto CommunicationInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentInfoDto PaymentInfo { get; set; }

        /// <summary>
        /// ### Age Range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ageRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AgeRange { get; set; }

        /// <summary>
        /// ### City of Birth
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cityOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CityOfBirth { get; set; }

        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DmsIdentifier Gender { get; set; }

        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DmsIdentifier LanguageCode { get; set; }

        [Newtonsoft.Json.JsonProperty("maritalStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DmsIdentifier MaritalStatus { get; set; }

        /// <summary>
        /// ### No Of Children
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noOfChildren", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NoOfChildren { get; set; }

        /// <summary>
        /// ### Pets
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Pets { get; set; }

        /// <summary>
        /// ### Position
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Position { get; set; }

        [Newtonsoft.Json.JsonProperty("profession", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DmsIdentifier Profession { get; set; }

        /// <summary>
        /// ### Salutation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salutation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Salutation { get; set; }

        /// <summary>
        /// ### Letter Salutation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("letterSalutation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LetterSalutation { get; set; }

        /// <summary>
        /// ### Social No.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("socialNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SocialNo { get; set; }

        /// <summary>
        /// ### Vocative FirstName
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vocativeFirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VocativeFirstName { get; set; }

        /// <summary>
        /// ### Vocative LastName
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vocativeLastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VocativeLastName { get; set; }

        /// <summary>
        /// ### Wedding Anniversary
        /// </summary>
        [Newtonsoft.Json.JsonProperty("weddingAnniversary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? WeddingAnniversary { get; set; }

        /// <summary>
        /// ### Birth Date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? BirthDate { get; set; }

        /// <summary>
        /// ### Is Default
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefault { get; set; }

        [Newtonsoft.Json.JsonProperty("salesPersonCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DmsIdentifier SalesPersonCode { get; set; }

        [Newtonsoft.Json.JsonProperty("emptyEmailReason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EmptyEmailReasonTypeEnum EmptyEmailReason { get; set; }

    }

    /// <summary>
    /// ### Mapping DTO
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MappingDto
    {
        /// <summary>
        /// ### Code = Value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// ### Name = Description/Label
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemDetails
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidationProblemDetails
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Errors { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Gets or Sets MappingTypes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MappingTypesEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CustomerId")]
        CustomerId = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AddressId")]
        AddressId = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ContactPersonId")]
        ContactPersonId = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"VehicleId")]
        VehicleId = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SalesDocumentId")]
        SalesDocumentId = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PurchaseDocumentId")]
        PurchaseDocumentId = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"InquiryId")]
        InquiryId = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ReservationId")]
        ReservationId = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceDealId")]
        ServiceDealId = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceJobId")]
        ServiceJobId = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Country")]
        Country = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Language")]
        Language = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Currency")]
        Currency = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"VatGroup")]
        VatGroup = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"TaxGroup")]
        TaxGroup = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Make")]
        Make = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Company")]
        Company = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"Branch")]
        Branch = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Location")]
        Location = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Gender")]
        Gender = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BpClassification")]
        BpClassification = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTitle")]
        AcademicTitle = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"VehicleStatus")]
        VehicleStatus = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"VehicleClassificationStatus")]
        VehicleClassificationStatus = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"VehicleAvailabilityStatus")]
        VehicleAvailabilityStatus = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"VehicleType")]
        VehicleType = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"VehicleFamily")]
        VehicleFamily = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"VehicleBodyStyle")]
        VehicleBodyStyle = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"VehicleFuelType")]
        VehicleFuelType = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"VehicleExteriorColorGroup")]
        VehicleExteriorColorGroup = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"VehicleInteriorTypeGroup")]
        VehicleInteriorTypeGroup = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"VehicleInteriorColorGroup")]
        VehicleInteriorColorGroup = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"VehicleGearType")]
        VehicleGearType = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"VehicleEmissionClass")]
        VehicleEmissionClass = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"VehicleEmissionSticker")]
        VehicleEmissionSticker = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"VehicleEngineType")]
        VehicleEngineType = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"PriceList")]
        PriceList = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentMethod")]
        PaymentMethod = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentTerms")]
        PaymentTerms = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"MaritalStatus")]
        MaritalStatus = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"DocumentType")]
        DocumentType = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"DocumentStatus")]
        DocumentStatus = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"SalesSegment")]
        SalesSegment = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"InquirySource")]
        InquirySource = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"InquiryChannel")]
        InquiryChannel = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"MarketSegment")]
        MarketSegment = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"SalesPerson")]
        SalesPerson = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"FinancialGroup")]
        FinancialGroup = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"FleetType")]
        FleetType = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"FleetSegment")]
        FleetSegment = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"ConsentCode")]
        ConsentCode = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"FinancingType")]
        FinancingType = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"ClosingReason")]
        ClosingReason = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"ItemGroup")]
        ItemGroup = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"LeadStatus")]
        LeadStatus = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"Profession")]
        Profession = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"Salutation")]
        Salutation = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"SalesType")]
        SalesType = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceContractSource")]
        ServiceContractSource = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceContractType")]
        ServiceContractType = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"IndustrialGroup")]
        IndustrialGroup = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"JobCardType")]
        JobCardType = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"JobCardSource")]
        JobCardSource = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"JobCardChannel")]
        JobCardChannel = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"JobCardStatus")]
        JobCardStatus = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"JobLineSource")]
        JobLineSource = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"JobLineStatus")]
        JobLineStatus = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"Department")]
        Department = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"CancellationReason")]
        CancellationReason = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"JobQualification")]
        JobQualification = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"ItemUoM")]
        ItemUoM = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAdvisor")]
        ServiceAdvisor = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"Technician")]
        Technician = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"BpLaborPriceGroup")]
        BpLaborPriceGroup = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"VatBusinessGroup")]
        VatBusinessGroup = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"VatProductGroup")]
        VatProductGroup = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"BillingIndicatorCode")]
        BillingIndicatorCode = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceJobLineCode")]
        ServiceJobLineCode = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"LaborCondition")]
        LaborCondition = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceJobTechnicianAllocationId")]
        ServiceJobTechnicianAllocationId = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"SalesArea")]
        SalesArea = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"Division")]
        Division = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"SalesOrganization")]
        SalesOrganization = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"PurchaseOrganization")]
        PurchaseOrganization = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"SalesDistrict")]
        SalesDistrict = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"SalesOffice")]
        SalesOffice = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"SalesGroup")]
        SalesGroup = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomerGroup")]
        CustomerGroup = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomerProfile")]
        CustomerProfile = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"ShippingCondition")]
        ShippingCondition = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"SalesServiceOrderStatus")]
        SalesServiceOrderStatus = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"SalesServiceJobStatus")]
        SalesServiceJobStatus = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"SalesServiceType")]
        SalesServiceType = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomsCategory")]
        CustomsCategory = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"GroupId")]
        GroupId = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"ParentGroupId")]
        ParentGroupId = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"CalendarCode")]
        CalendarCode = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceId")]
        InvoiceId = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"BPIdentifier")]
        BPIdentifier = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"BPTaxNumber")]
        BPTaxNumber = 100,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625