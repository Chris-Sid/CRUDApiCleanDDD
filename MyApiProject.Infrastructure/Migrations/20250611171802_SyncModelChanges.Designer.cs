// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyApiProject.Infrastructure.Persistence;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyApiProject.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250611171802_SyncModelChanges")]
    partial class SyncModelChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyApiProject.Domain.Entities.ActivityLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OpportunityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OpportunityId");

                    b.ToTable("activitylogs");
                });

            modelBuilder.Entity("MyApiProject.Domain.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Admins", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d3e2bff3-4cbf-42ab-bd8b-dc6fbd3ec7a1"),
                            PasswordHash = "$2a$11$vdDGr1eVpQWaHo2EYiCxUubB7yoftvlHr2CA3L3GvYxAo/Rh0IBrW",
                            Role = "Admin",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("MyApiProject.Domain.Entities.CommunicationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("communicationlogs");
                });

            modelBuilder.Entity("MyApiProject.Domain.Entities.ContactPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("contactpersons");
                });

            modelBuilder.Entity("MyApiProject.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("createddate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("MyApiProject.Domain.Entities.FollowUp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.ToTable("followups");
                });

            modelBuilder.Entity("MyApiProject.Domain.Entities.Lead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AssignedTo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("leads");
                });

            modelBuilder.Entity("MyApiProject.Domain.Entities.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RelatedCustomerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RelatedCustomerId");

                    b.ToTable("notes");
                });

            modelBuilder.Entity("MyApiProject.Domain.Entities.Opportunity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("EstimatedValue")
                        .HasColumnType("numeric");

                    b.Property<Guid>("RelatedCustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RelatedCustomerId");

                    b.ToTable("opportunities");
                });

            modelBuilder.Entity("MyApiProject.Domain.Entities.ActivityLog", b =>
                {
                    b.HasOne("MyApiProject.Domain.Entities.Opportunity", "Opportunity")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opportunity");
                });

            modelBuilder.Entity("MyApiProject.Domain.Entities.CommunicationLog", b =>
                {
                    b.HasOne("MyApiProject.Domain.Entities.Customer", "Customer")
                        .WithMany("communicationlogs")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MyApiProject.Domain.Entities.ContactPerson", b =>
                {
                    b.HasOne("MyApiProject.Domain.Entities.Customer", "Customer")
                        .WithMany("contacts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MyApiProject.Domain.Entities.FollowUp", b =>
                {
                    b.HasOne("MyApiProject.Domain.Entities.Lead", "Lead")
                        .WithMany("FollowUps")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("MyApiProject.Domain.Entities.Note", b =>
                {
                    b.HasOne("MyApiProject.Domain.Entities.Customer", "RelatedCustomer")
                        .WithMany("notes")
                        .HasForeignKey("RelatedCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedCustomer");
                });

            modelBuilder.Entity("MyApiProject.Domain.Entities.Opportunity", b =>
                {
                    b.HasOne("MyApiProject.Domain.Entities.Customer", "RelatedCustomer")
                        .WithMany("opportunities")
                        .HasForeignKey("RelatedCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedCustomer");
                });

            modelBuilder.Entity("MyApiProject.Domain.Entities.Customer", b =>
                {
                    b.Navigation("communicationlogs");

                    b.Navigation("contacts");

                    b.Navigation("notes");

                    b.Navigation("opportunities");
                });

            modelBuilder.Entity("MyApiProject.Domain.Entities.Lead", b =>
                {
                    b.Navigation("FollowUps");
                });

            modelBuilder.Entity("MyApiProject.Domain.Entities.Opportunity", b =>
                {
                    b.Navigation("ActivityLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
